// Code generated by go-enum
// DO NOT EDIT!

package model

import (
	"fmt"
)

const (
	// CampusAoyama is a Campus of type Aoyama
	CampusAoyama Campus = iota + 1
	// CampusSagamihara is a Campus of type Sagamihara
	CampusSagamihara
)

const _CampusName = "AoyamaSagamihara"

var _CampusMap = map[Campus]string{
	1: _CampusName[0:6],
	2: _CampusName[6:16],
}

// String implements the Stringer interface.
func (x Campus) String() string {
	if str, ok := _CampusMap[x]; ok {
		return str
	}
	return fmt.Sprintf("Campus(%d)", x)
}

var _CampusValue = map[string]Campus{
	_CampusName[0:6]:  1,
	_CampusName[6:16]: 2,
}

// ParseCampus attempts to convert a string to a Campus
func ParseCampus(name string) (Campus, error) {
	if x, ok := _CampusValue[name]; ok {
		return x, nil
	}
	return Campus(0), fmt.Errorf("%s is not a valid Campus", name)
}

// MarshalText implements the text marshaller method
func (x Campus) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method
func (x *Campus) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseCampus(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

const (
	// FacultyTypeCampus is a FacultyType of type Campus
	FacultyTypeCampus FacultyType = iota + 1
	// FacultyTypeFaculty is a FacultyType of type Faculty
	FacultyTypeFaculty
	// FacultyTypeDepartment is a FacultyType of type Department
	FacultyTypeDepartment
)

const _FacultyTypeName = "CampusFacultyDepartment"

var _FacultyTypeMap = map[FacultyType]string{
	1: _FacultyTypeName[0:6],
	2: _FacultyTypeName[6:13],
	3: _FacultyTypeName[13:23],
}

// String implements the Stringer interface.
func (x FacultyType) String() string {
	if str, ok := _FacultyTypeMap[x]; ok {
		return str
	}
	return fmt.Sprintf("FacultyType(%d)", x)
}

var _FacultyTypeValue = map[string]FacultyType{
	_FacultyTypeName[0:6]:   1,
	_FacultyTypeName[6:13]:  2,
	_FacultyTypeName[13:23]: 3,
}

// ParseFacultyType attempts to convert a string to a FacultyType
func ParseFacultyType(name string) (FacultyType, error) {
	if x, ok := _FacultyTypeValue[name]; ok {
		return x, nil
	}
	return FacultyType(0), fmt.Errorf("%s is not a valid FacultyType", name)
}

// MarshalText implements the text marshaller method
func (x FacultyType) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method
func (x *FacultyType) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseFacultyType(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}
