// Code generated by MockGen. DO NOT EDIT.
// Source: review.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	"reflect"

	"github.com/golang/mock/gomock"
	"github.com/k-ueki/AGPlus/server/domain/entity"
)

// MockReviewPostRepository is a mock of ReviewPostRepository interface.
type MockReviewPostRepository struct {
	ctrl     *gomock.Controller
	recorder *MockReviewPostRepositoryMockRecorder
}

// MockReviewPostRepositoryMockRecorder is the mock recorder for MockReviewPostRepository.
type MockReviewPostRepositoryMockRecorder struct {
	mock *MockReviewPostRepository
}

// NewMockReviewPostRepository creates a new mock instance.
func NewMockReviewPostRepository(ctrl *gomock.Controller) *MockReviewPostRepository {
	mock := &MockReviewPostRepository{ctrl: ctrl}
	mock.recorder = &MockReviewPostRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReviewPostRepository) EXPECT() *MockReviewPostRepositoryMockRecorder {
	return m.recorder
}

// Store mocks base method.
func (m *MockReviewPostRepository) Store(p *entity.Review) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Store", p)
	ret0, _ := ret[0].(error)
	return ret0
}

// Store indicates an expected call of Store.
func (mr *MockReviewPostRepositoryMockRecorder) Store(p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*MockReviewPostRepository)(nil).Store), p)
}

// Delete mocks base method.
func (m *MockReviewPostRepository) Delete(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockReviewPostRepositoryMockRecorder) Delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockReviewPostRepository)(nil).Delete), id)
}

// MockReviewGetRepository is a mock of ReviewGetRepository interface.
type MockReviewGetRepository struct {
	ctrl     *gomock.Controller
	recorder *MockReviewGetRepositoryMockRecorder
}

// MockReviewGetRepositoryMockRecorder is the mock recorder for MockReviewGetRepository.
type MockReviewGetRepositoryMockRecorder struct {
	mock *MockReviewGetRepository
}

// NewMockReviewGetRepository creates a new mock instance.
func NewMockReviewGetRepository(ctrl *gomock.Controller) *MockReviewGetRepository {
	mock := &MockReviewGetRepository{ctrl: ctrl}
	mock.recorder = &MockReviewGetRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReviewGetRepository) EXPECT() *MockReviewGetRepositoryMockRecorder {
	return m.recorder
}

// FindAll mocks base method.
func (m *MockReviewGetRepository) FindAll() ([]*entity.Review, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll")
	ret0, _ := ret[0].([]*entity.Review)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockReviewGetRepositoryMockRecorder) FindAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockReviewGetRepository)(nil).FindAll))
}
