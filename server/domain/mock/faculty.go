// Code generated by MockGen. DO NOT EDIT.
// Source: faculty.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	gomock "github.com/golang/mock/gomock"
	entity "github.com/k-ueki/AGPlus/server/domain/entity"
	reflect "reflect"
)

// MockFacultyGetRepository is a mock of FacultyGetRepository interface.
type MockFacultyGetRepository struct {
	ctrl     *gomock.Controller
	recorder *MockFacultyGetRepositoryMockRecorder
}

// MockFacultyGetRepositoryMockRecorder is the mock recorder for MockFacultyGetRepository.
type MockFacultyGetRepositoryMockRecorder struct {
	mock *MockFacultyGetRepository
}

// NewMockFacultyGetRepository creates a new mock instance.
func NewMockFacultyGetRepository(ctrl *gomock.Controller) *MockFacultyGetRepository {
	mock := &MockFacultyGetRepository{ctrl: ctrl}
	mock.recorder = &MockFacultyGetRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFacultyGetRepository) EXPECT() *MockFacultyGetRepositoryMockRecorder {
	return m.recorder
}

// FindFaculties mocks base method.
func (m *MockFacultyGetRepository) FindFaculties() ([]*entity.Faculty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindFaculties")
	ret0, _ := ret[0].([]*entity.Faculty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindFaculties indicates an expected call of FindFaculties.
func (mr *MockFacultyGetRepositoryMockRecorder) FindFaculties() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindFaculties", reflect.TypeOf((*MockFacultyGetRepository)(nil).FindFaculties))
}

// FindFacultiesByCampusID mocks base method.
func (m *MockFacultyGetRepository) FindFacultiesByCampusID(campusID int) ([]*entity.Faculty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindFacultiesByCampusID", campusID)
	ret0, _ := ret[0].([]*entity.Faculty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindFacultiesByCampusID indicates an expected call of FindFacultiesByCampusID.
func (mr *MockFacultyGetRepositoryMockRecorder) FindFacultiesByCampusID(campusID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindFacultiesByCampusID", reflect.TypeOf((*MockFacultyGetRepository)(nil).FindFacultiesByCampusID), campusID)
}

// FindFacultyByID mocks base method.
func (m *MockFacultyGetRepository) FindFacultyByID(id int) (*entity.Faculty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindFacultyByID", id)
	ret0, _ := ret[0].(*entity.Faculty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindFacultyByID indicates an expected call of FindFacultyByID.
func (mr *MockFacultyGetRepositoryMockRecorder) FindFacultyByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindFacultyByID", reflect.TypeOf((*MockFacultyGetRepository)(nil).FindFacultyByID), id)
}

// FindDepartments mocks base method.
func (m *MockFacultyGetRepository) FindDepartments() ([]*entity.Department, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindDepartments")
	ret0, _ := ret[0].([]*entity.Department)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindDepartments indicates an expected call of FindDepartments.
func (mr *MockFacultyGetRepositoryMockRecorder) FindDepartments() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindDepartments", reflect.TypeOf((*MockFacultyGetRepository)(nil).FindDepartments))
}

// FindDepartmentsByCampusID mocks base method.
func (m *MockFacultyGetRepository) FindDepartmentsByCampusID(campusID int) ([]*entity.Department, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindDepartmentsByCampusID", campusID)
	ret0, _ := ret[0].([]*entity.Department)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindDepartmentsByCampusID indicates an expected call of FindDepartmentsByCampusID.
func (mr *MockFacultyGetRepositoryMockRecorder) FindDepartmentsByCampusID(campusID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindDepartmentsByCampusID", reflect.TypeOf((*MockFacultyGetRepository)(nil).FindDepartmentsByCampusID), campusID)
}

// FindDepartmentsByFacultyID mocks base method.
func (m *MockFacultyGetRepository) FindDepartmentsByFacultyID(facultyID int) ([]*entity.Department, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindDepartmentsByFacultyID", facultyID)
	ret0, _ := ret[0].([]*entity.Department)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindDepartmentsByFacultyID indicates an expected call of FindDepartmentsByFacultyID.
func (mr *MockFacultyGetRepositoryMockRecorder) FindDepartmentsByFacultyID(facultyID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindDepartmentsByFacultyID", reflect.TypeOf((*MockFacultyGetRepository)(nil).FindDepartmentsByFacultyID), facultyID)
}

// FindDepartmentByID mocks base method.
func (m *MockFacultyGetRepository) FindDepartmentByID(id int) (*entity.Department, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindDepartmentByID", id)
	ret0, _ := ret[0].(*entity.Department)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindDepartmentByID indicates an expected call of FindDepartmentByID.
func (mr *MockFacultyGetRepositoryMockRecorder) FindDepartmentByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindDepartmentByID", reflect.TypeOf((*MockFacultyGetRepository)(nil).FindDepartmentByID), id)
}
